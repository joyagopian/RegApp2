#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegApp2.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="registration")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertattendance(attendance instance);
    partial void Updateattendance(attendance instance);
    partial void Deleteattendance(attendance instance);
    partial void InsertteacherSchedule(teacherSchedule instance);
    partial void UpdateteacherSchedule(teacherSchedule instance);
    partial void DeleteteacherSchedule(teacherSchedule instance);
    partial void InsertattendanceUser(attendanceUser instance);
    partial void UpdateattendanceUser(attendanceUser instance);
    partial void DeleteattendanceUser(attendanceUser instance);
    partial void Insertcourse(course instance);
    partial void Updatecourse(course instance);
    partial void Deletecourse(course instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDepartmentCourse(DepartmentCourse instance);
    partial void UpdateDepartmentCourse(DepartmentCourse instance);
    partial void DeleteDepartmentCourse(DepartmentCourse instance);
    partial void Insertprofile(profile instance);
    partial void Updateprofile(profile instance);
    partial void Deleteprofile(profile instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Insertroom(room instance);
    partial void Updateroom(room instance);
    partial void Deleteroom(room instance);
    partial void Insertschedule(schedule instance);
    partial void Updateschedule(schedule instance);
    partial void Deleteschedule(schedule instance);
    partial void Insertsemester(semester instance);
    partial void Updatesemester(semester instance);
    partial void Deletesemester(semester instance);
    partial void Insertsession(session instance);
    partial void Updatesession(session instance);
    partial void Deletesession(session instance);
    partial void InsertstudentCourse(studentCourse instance);
    partial void UpdatestudentCourse(studentCourse instance);
    partial void DeletestudentCourse(studentCourse instance);
    partial void InsertstudentSchedule(studentSchedule instance);
    partial void UpdatestudentSchedule(studentSchedule instance);
    partial void DeletestudentSchedule(studentSchedule instance);
    partial void Insertteacher(teacher instance);
    partial void Updateteacher(teacher instance);
    partial void Deleteteacher(teacher instance);
    partial void InsertteacherCourse(teacherCourse instance);
    partial void UpdateteacherCourse(teacherCourse instance);
    partial void DeleteteacherCourse(teacherCourse instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["registrationConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<attendance> attendances
		{
			get
			{
				return this.GetTable<attendance>();
			}
		}
		
		public System.Data.Linq.Table<teacherSchedule> teacherSchedules
		{
			get
			{
				return this.GetTable<teacherSchedule>();
			}
		}
		
		public System.Data.Linq.Table<attendanceUser> attendanceUsers
		{
			get
			{
				return this.GetTable<attendanceUser>();
			}
		}
		
		public System.Data.Linq.Table<course> courses
		{
			get
			{
				return this.GetTable<course>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentCourse> DepartmentCourses
		{
			get
			{
				return this.GetTable<DepartmentCourse>();
			}
		}
		
		public System.Data.Linq.Table<profile> profiles
		{
			get
			{
				return this.GetTable<profile>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<room> rooms
		{
			get
			{
				return this.GetTable<room>();
			}
		}
		
		public System.Data.Linq.Table<schedule> schedules
		{
			get
			{
				return this.GetTable<schedule>();
			}
		}
		
		public System.Data.Linq.Table<semester> semesters
		{
			get
			{
				return this.GetTable<semester>();
			}
		}
		
		public System.Data.Linq.Table<session> sessions
		{
			get
			{
				return this.GetTable<session>();
			}
		}
		
		public System.Data.Linq.Table<studentCourse> studentCourses
		{
			get
			{
				return this.GetTable<studentCourse>();
			}
		}
		
		public System.Data.Linq.Table<studentSchedule> studentSchedules
		{
			get
			{
				return this.GetTable<studentSchedule>();
			}
		}
		
		public System.Data.Linq.Table<teacher> teachers
		{
			get
			{
				return this.GetTable<teacher>();
			}
		}
		
		public System.Data.Linq.Table<teacherCourse> teacherCourses
		{
			get
			{
				return this.GetTable<teacherCourse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendance")]
	public partial class attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _studentSchedualId;
		
		private char _checkA;
		
		private EntitySet<attendanceUser> _attendanceUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstudentSchedualIdChanging(int value);
    partial void OnstudentSchedualIdChanged();
    partial void OncheckAChanging(char value);
    partial void OncheckAChanged();
    #endregion
		
		public attendance()
		{
			this._attendanceUsers = new EntitySet<attendanceUser>(new Action<attendanceUser>(this.attach_attendanceUsers), new Action<attendanceUser>(this.detach_attendanceUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentSchedualId", DbType="Int NOT NULL")]
		public int studentSchedualId
		{
			get
			{
				return this._studentSchedualId;
			}
			set
			{
				if ((this._studentSchedualId != value))
				{
					this.OnstudentSchedualIdChanging(value);
					this.SendPropertyChanging();
					this._studentSchedualId = value;
					this.SendPropertyChanged("studentSchedualId");
					this.OnstudentSchedualIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_checkA", DbType="Char(1) NOT NULL")]
		public char checkA
		{
			get
			{
				return this._checkA;
			}
			set
			{
				if ((this._checkA != value))
				{
					this.OncheckAChanging(value);
					this.SendPropertyChanging();
					this._checkA = value;
					this.SendPropertyChanged("checkA");
					this.OncheckAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_attendanceUser", Storage="_attendanceUsers", ThisKey="id", OtherKey="attendanceId")]
		public EntitySet<attendanceUser> attendanceUsers
		{
			get
			{
				return this._attendanceUsers;
			}
			set
			{
				this._attendanceUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attendanceUsers(attendanceUser entity)
		{
			this.SendPropertyChanging();
			entity.attendance = this;
		}
		
		private void detach_attendanceUsers(attendanceUser entity)
		{
			this.SendPropertyChanging();
			entity.attendance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacherSchedule")]
	public partial class teacherSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _scheduleProfileId;
		
		private int _schedualSchedualId;
		
		private int _schedualEvaluation;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<schedule> _schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnscheduleProfileIdChanging(int value);
    partial void OnscheduleProfileIdChanged();
    partial void OnschedualSchedualIdChanging(int value);
    partial void OnschedualSchedualIdChanged();
    partial void OnschedualEvaluationChanging(int value);
    partial void OnschedualEvaluationChanged();
    #endregion
		
		public teacherSchedule()
		{
			this._profile = default(EntityRef<profile>);
			this._schedule = default(EntityRef<schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleProfileId", DbType="Int NOT NULL")]
		public int scheduleProfileId
		{
			get
			{
				return this._scheduleProfileId;
			}
			set
			{
				if ((this._scheduleProfileId != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleProfileIdChanging(value);
					this.SendPropertyChanging();
					this._scheduleProfileId = value;
					this.SendPropertyChanged("scheduleProfileId");
					this.OnscheduleProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schedualSchedualId", DbType="Int NOT NULL")]
		public int schedualSchedualId
		{
			get
			{
				return this._schedualSchedualId;
			}
			set
			{
				if ((this._schedualSchedualId != value))
				{
					if (this._schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschedualSchedualIdChanging(value);
					this.SendPropertyChanging();
					this._schedualSchedualId = value;
					this.SendPropertyChanged("schedualSchedualId");
					this.OnschedualSchedualIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schedualEvaluation", DbType="Int NOT NULL")]
		public int schedualEvaluation
		{
			get
			{
				return this._schedualEvaluation;
			}
			set
			{
				if ((this._schedualEvaluation != value))
				{
					this.OnschedualEvaluationChanging(value);
					this.SendPropertyChanging();
					this._schedualEvaluation = value;
					this.SendPropertyChanged("schedualEvaluation");
					this.OnschedualEvaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_teacherSchedule", Storage="_profile", ThisKey="scheduleProfileId", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.teacherSchedules.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.teacherSchedules.Add(this);
						this._scheduleProfileId = value.id;
					}
					else
					{
						this._scheduleProfileId = default(int);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schedule_teacherSchedule", Storage="_schedule", ThisKey="schedualSchedualId", OtherKey="id", IsForeignKey=true)]
		public schedule schedule
		{
			get
			{
				return this._schedule.Entity;
			}
			set
			{
				schedule previousValue = this._schedule.Entity;
				if (((previousValue != value) 
							|| (this._schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._schedule.Entity = null;
						previousValue.teacherSchedules.Remove(this);
					}
					this._schedule.Entity = value;
					if ((value != null))
					{
						value.teacherSchedules.Add(this);
						this._schedualSchedualId = value.id;
					}
					else
					{
						this._schedualSchedualId = default(int);
					}
					this.SendPropertyChanged("schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendanceUser")]
	public partial class attendanceUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _attendanceId;
		
		private int _UserId;
		
		private EntityRef<attendance> _attendance;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnattendanceIdChanging(int value);
    partial void OnattendanceIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public attendanceUser()
		{
			this._attendance = default(EntityRef<attendance>);
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attendanceId", DbType="Int NOT NULL")]
		public int attendanceId
		{
			get
			{
				return this._attendanceId;
			}
			set
			{
				if ((this._attendanceId != value))
				{
					if (this._attendance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnattendanceIdChanging(value);
					this.SendPropertyChanging();
					this._attendanceId = value;
					this.SendPropertyChanged("attendanceId");
					this.OnattendanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_attendanceUser", Storage="_attendance", ThisKey="attendanceId", OtherKey="id", IsForeignKey=true)]
		public attendance attendance
		{
			get
			{
				return this._attendance.Entity;
			}
			set
			{
				attendance previousValue = this._attendance.Entity;
				if (((previousValue != value) 
							|| (this._attendance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attendance.Entity = null;
						previousValue.attendanceUsers.Remove(this);
					}
					this._attendance.Entity = value;
					if ((value != null))
					{
						value.attendanceUsers.Add(this);
						this._attendanceId = value.id;
					}
					else
					{
						this._attendanceId = default(int);
					}
					this.SendPropertyChanged("attendance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_attendanceUser", Storage="_profile", ThisKey="UserId", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.attendanceUsers.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.attendanceUsers.Add(this);
						this._UserId = value.id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.courses")]
	public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Data.Linq.Binary _describtion;
		
		private byte _active;
		
		private string _courseIdentifier;
		
		private int _teacherId;
		
		private EntitySet<DepartmentCourse> _DepartmentCourses;
		
		private EntitySet<schedule> _schedules;
		
		private EntityRef<studentCourse> _studentCourse;
		
		private EntityRef<teacherCourse> _teacherCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescribtionChanging(System.Data.Linq.Binary value);
    partial void OndescribtionChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    partial void OncourseIdentifierChanging(string value);
    partial void OncourseIdentifierChanged();
    partial void OnteacherIdChanging(int value);
    partial void OnteacherIdChanged();
    #endregion
		
		public course()
		{
			this._DepartmentCourses = new EntitySet<DepartmentCourse>(new Action<DepartmentCourse>(this.attach_DepartmentCourses), new Action<DepartmentCourse>(this.detach_DepartmentCourses));
			this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
			this._studentCourse = default(EntityRef<studentCourse>);
			this._teacherCourse = default(EntityRef<teacherCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_describtion", DbType="VarBinary(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary describtion
		{
			get
			{
				return this._describtion;
			}
			set
			{
				if ((this._describtion != value))
				{
					this.OndescribtionChanging(value);
					this.SendPropertyChanging();
					this._describtion = value;
					this.SendPropertyChanged("describtion");
					this.OndescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="TinyInt NOT NULL")]
		public byte active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseIdentifier", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string courseIdentifier
		{
			get
			{
				return this._courseIdentifier;
			}
			set
			{
				if ((this._courseIdentifier != value))
				{
					this.OncourseIdentifierChanging(value);
					this.SendPropertyChanging();
					this._courseIdentifier = value;
					this.SendPropertyChanged("courseIdentifier");
					this.OncourseIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherId", DbType="Int NOT NULL")]
		public int teacherId
		{
			get
			{
				return this._teacherId;
			}
			set
			{
				if ((this._teacherId != value))
				{
					this.OnteacherIdChanging(value);
					this.SendPropertyChanging();
					this._teacherId = value;
					this.SendPropertyChanged("teacherId");
					this.OnteacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_DepartmentCourse", Storage="_DepartmentCourses", ThisKey="id", OtherKey="courseId")]
		public EntitySet<DepartmentCourse> DepartmentCourses
		{
			get
			{
				return this._DepartmentCourses;
			}
			set
			{
				this._DepartmentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_schedule", Storage="_schedules", ThisKey="id", OtherKey="courseid")]
		public EntitySet<schedule> schedules
		{
			get
			{
				return this._schedules;
			}
			set
			{
				this._schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_studentCourse", Storage="_studentCourse", ThisKey="id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public studentCourse studentCourse
		{
			get
			{
				return this._studentCourse.Entity;
			}
			set
			{
				studentCourse previousValue = this._studentCourse.Entity;
				if (((previousValue != value) 
							|| (this._studentCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._studentCourse.Entity = null;
						previousValue.course = null;
					}
					this._studentCourse.Entity = value;
					if ((value != null))
					{
						value.course = this;
					}
					this.SendPropertyChanged("studentCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_teacherCourse", Storage="_teacherCourse", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public teacherCourse teacherCourse
		{
			get
			{
				return this._teacherCourse.Entity;
			}
			set
			{
				teacherCourse previousValue = this._teacherCourse.Entity;
				if (((previousValue != value) 
							|| (this._teacherCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._teacherCourse.Entity = null;
						previousValue.course = null;
					}
					this._teacherCourse.Entity = value;
					if ((value != null))
					{
						value.course = this;
					}
					this.SendPropertyChanged("teacherCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentCourses(DepartmentCourse entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_DepartmentCourses(DepartmentCourse entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _Describtion;
		
		private EntityRef<DepartmentCourse> _DepartmentCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnDescribtionChanging(string value);
    partial void OnDescribtionChanged();
    #endregion
		
		public Department()
		{
			this._DepartmentCourse = default(EntityRef<DepartmentCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describtion", DbType="VarChar(255)")]
		public string Describtion
		{
			get
			{
				return this._Describtion;
			}
			set
			{
				if ((this._Describtion != value))
				{
					this.OnDescribtionChanging(value);
					this.SendPropertyChanging();
					this._Describtion = value;
					this.SendPropertyChanged("Describtion");
					this.OnDescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentCourse", Storage="_DepartmentCourse", ThisKey="id", OtherKey="DepartmentCourseId", IsUnique=true, IsForeignKey=false)]
		public DepartmentCourse DepartmentCourse
		{
			get
			{
				return this._DepartmentCourse.Entity;
			}
			set
			{
				DepartmentCourse previousValue = this._DepartmentCourse.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentCourse.Entity = null;
						previousValue.Department = null;
					}
					this._DepartmentCourse.Entity = value;
					if ((value != null))
					{
						value.Department = this;
					}
					this.SendPropertyChanged("DepartmentCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentCourse")]
	public partial class DepartmentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentCourseId;
		
		private int _courseId;
		
		private int _departmentId;
		
		private EntityRef<course> _course;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentCourseIdChanging(int value);
    partial void OnDepartmentCourseIdChanged();
    partial void OncourseIdChanging(int value);
    partial void OncourseIdChanged();
    partial void OndepartmentIdChanging(int value);
    partial void OndepartmentIdChanged();
    #endregion
		
		public DepartmentCourse()
		{
			this._course = default(EntityRef<course>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentCourseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentCourseId
		{
			get
			{
				return this._DepartmentCourseId;
			}
			set
			{
				if ((this._DepartmentCourseId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentCourseIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCourseId = value;
					this.SendPropertyChanged("DepartmentCourseId");
					this.OnDepartmentCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseId", DbType="Int NOT NULL")]
		public int courseId
		{
			get
			{
				return this._courseId;
			}
			set
			{
				if ((this._courseId != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIdChanging(value);
					this.SendPropertyChanging();
					this._courseId = value;
					this.SendPropertyChanged("courseId");
					this.OncourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentId", DbType="Int NOT NULL")]
		public int departmentId
		{
			get
			{
				return this._departmentId;
			}
			set
			{
				if ((this._departmentId != value))
				{
					this.OndepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._departmentId = value;
					this.SendPropertyChanged("departmentId");
					this.OndepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_DepartmentCourse", Storage="_course", ThisKey="courseId", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.DepartmentCourses.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.DepartmentCourses.Add(this);
						this._courseId = value.id;
					}
					else
					{
						this._courseId = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentCourse", Storage="_Department", ThisKey="DepartmentCourseId", OtherKey="id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.DepartmentCourse = null;
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.DepartmentCourse = this;
						this._DepartmentCourseId = value.id;
					}
					else
					{
						this._DepartmentCourseId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.profiles")]
	public partial class profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _uid;
		
		private int _semesterid;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _email;
		
		private string _dob;
		
		private string _gender;
		
		private string _addressOne;
		
		private string _addressTwo;
		
		private string _phone;
		
		private string _mobile;
		
		private System.Nullable<int> _roleId;
		
		private byte _active;
		
		private System.Data.Linq.Binary _date;
		
		private string _Describtion;
		
		private EntitySet<teacherSchedule> _teacherSchedules;
		
		private EntitySet<attendanceUser> _attendanceUsers;
		
		private EntitySet<studentCourse> _studentCourses;
		
		private EntitySet<studentSchedule> _studentSchedules;
		
		private EntityRef<role> _role;
		
		private EntityRef<semester> _semester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuidChanging(string value);
    partial void OnuidChanged();
    partial void OnsemesteridChanging(int value);
    partial void OnsemesteridChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OndobChanging(string value);
    partial void OndobChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnaddressOneChanging(string value);
    partial void OnaddressOneChanged();
    partial void OnaddressTwoChanging(string value);
    partial void OnaddressTwoChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnroleIdChanging(System.Nullable<int> value);
    partial void OnroleIdChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    partial void OndateChanging(System.Data.Linq.Binary value);
    partial void OndateChanged();
    partial void OnDescribtionChanging(string value);
    partial void OnDescribtionChanged();
    #endregion
		
		public profile()
		{
			this._teacherSchedules = new EntitySet<teacherSchedule>(new Action<teacherSchedule>(this.attach_teacherSchedules), new Action<teacherSchedule>(this.detach_teacherSchedules));
			this._attendanceUsers = new EntitySet<attendanceUser>(new Action<attendanceUser>(this.attach_attendanceUsers), new Action<attendanceUser>(this.detach_attendanceUsers));
			this._studentCourses = new EntitySet<studentCourse>(new Action<studentCourse>(this.attach_studentCourses), new Action<studentCourse>(this.detach_studentCourses));
			this._studentSchedules = new EntitySet<studentSchedule>(new Action<studentSchedule>(this.attach_studentSchedules), new Action<studentSchedule>(this.detach_studentSchedules));
			this._role = default(EntityRef<role>);
			this._semester = default(EntityRef<semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int semesterid
		{
			get
			{
				return this._semesterid;
			}
			set
			{
				if ((this._semesterid != value))
				{
					if (this._semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsemesteridChanging(value);
					this.SendPropertyChanging();
					this._semesterid = value;
					this.SendPropertyChanged("semesterid");
					this.OnsemesteridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressOne", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string addressOne
		{
			get
			{
				return this._addressOne;
			}
			set
			{
				if ((this._addressOne != value))
				{
					this.OnaddressOneChanging(value);
					this.SendPropertyChanging();
					this._addressOne = value;
					this.SendPropertyChanged("addressOne");
					this.OnaddressOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressTwo", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string addressTwo
		{
			get
			{
				return this._addressTwo;
			}
			set
			{
				if ((this._addressTwo != value))
				{
					this.OnaddressTwoChanging(value);
					this.SendPropertyChanging();
					this._addressTwo = value;
					this.SendPropertyChanged("addressTwo");
					this.OnaddressTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describtion", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Describtion
		{
			get
			{
				return this._Describtion;
			}
			set
			{
				if ((this._Describtion != value))
				{
					this.OnDescribtionChanging(value);
					this.SendPropertyChanging();
					this._Describtion = value;
					this.SendPropertyChanged("Describtion");
					this.OnDescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_teacherSchedule", Storage="_teacherSchedules", ThisKey="id", OtherKey="scheduleProfileId")]
		public EntitySet<teacherSchedule> teacherSchedules
		{
			get
			{
				return this._teacherSchedules;
			}
			set
			{
				this._teacherSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_attendanceUser", Storage="_attendanceUsers", ThisKey="id", OtherKey="UserId")]
		public EntitySet<attendanceUser> attendanceUsers
		{
			get
			{
				return this._attendanceUsers;
			}
			set
			{
				this._attendanceUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_studentCourse", Storage="_studentCourses", ThisKey="id", OtherKey="profileId")]
		public EntitySet<studentCourse> studentCourses
		{
			get
			{
				return this._studentCourses;
			}
			set
			{
				this._studentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_studentSchedule", Storage="_studentSchedules", ThisKey="id", OtherKey="scheduleProfileId")]
		public EntitySet<studentSchedule> studentSchedules
		{
			get
			{
				return this._studentSchedules;
			}
			set
			{
				this._studentSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_profile", Storage="_role", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.profiles.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.profiles.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="semester_profile", Storage="_semester", ThisKey="semesterid", OtherKey="id", IsForeignKey=true)]
		public semester semester
		{
			get
			{
				return this._semester.Entity;
			}
			set
			{
				semester previousValue = this._semester.Entity;
				if (((previousValue != value) 
							|| (this._semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._semester.Entity = null;
						previousValue.profiles.Remove(this);
					}
					this._semester.Entity = value;
					if ((value != null))
					{
						value.profiles.Add(this);
						this._semesterid = value.id;
					}
					else
					{
						this._semesterid = default(int);
					}
					this.SendPropertyChanged("semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_teacherSchedules(teacherSchedule entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_teacherSchedules(teacherSchedule entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_attendanceUsers(attendanceUser entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_attendanceUsers(attendanceUser entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_studentCourses(studentCourse entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_studentCourses(studentCourse entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_studentSchedules(studentSchedule entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_studentSchedules(studentSchedule entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.roles")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleId;
		
		private string _name;
		
		private string _describtion;
		
		private byte _active;
		
		private EntitySet<profile> _profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescribtionChanging(string value);
    partial void OndescribtionChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    #endregion
		
		public role()
		{
			this._profiles = new EntitySet<profile>(new Action<profile>(this.attach_profiles), new Action<profile>(this.detach_profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_describtion", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string describtion
		{
			get
			{
				return this._describtion;
			}
			set
			{
				if ((this._describtion != value))
				{
					this.OndescribtionChanging(value);
					this.SendPropertyChanging();
					this._describtion = value;
					this.SendPropertyChanged("describtion");
					this.OndescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="TinyInt NOT NULL")]
		public byte active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_profile", Storage="_profiles", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<profile> profiles
		{
			get
			{
				return this._profiles;
			}
			set
			{
				this._profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rooms")]
	public partial class room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _describtion;
		
		private EntitySet<schedule> _schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescribtionChanging(string value);
    partial void OndescribtionChanged();
    #endregion
		
		public room()
		{
			this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_describtion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string describtion
		{
			get
			{
				return this._describtion;
			}
			set
			{
				if ((this._describtion != value))
				{
					this.OndescribtionChanging(value);
					this.SendPropertyChanging();
					this._describtion = value;
					this.SendPropertyChanged("describtion");
					this.OndescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_schedule", Storage="_schedules", ThisKey="id", OtherKey="roomId")]
		public EntitySet<schedule> schedules
		{
			get
			{
				return this._schedules;
			}
			set
			{
				this._schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.room = this;
		}
		
		private void detach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.schedule")]
	public partial class schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _courseid;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private System.TimeSpan _time;
		
		private string _status;
		
		private int _roomId;
		
		private byte _active;
		
		private EntitySet<teacherSchedule> _teacherSchedules;
		
		private EntitySet<studentSchedule> _studentSchedules;
		
		private EntityRef<course> _course;
		
		private EntityRef<room> _room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncourseidChanging(int value);
    partial void OncourseidChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OntimeChanging(System.TimeSpan value);
    partial void OntimeChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    #endregion
		
		public schedule()
		{
			this._teacherSchedules = new EntitySet<teacherSchedule>(new Action<teacherSchedule>(this.attach_teacherSchedules), new Action<teacherSchedule>(this.detach_teacherSchedules));
			this._studentSchedules = new EntitySet<studentSchedule>(new Action<studentSchedule>(this.attach_studentSchedules), new Action<studentSchedule>(this.detach_studentSchedules));
			this._course = default(EntityRef<course>);
			this._room = default(EntityRef<room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseid", DbType="Int NOT NULL")]
		public int courseid
		{
			get
			{
				return this._courseid;
			}
			set
			{
				if ((this._courseid != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseidChanging(value);
					this.SendPropertyChanging();
					this._courseid = value;
					this.SendPropertyChanged("courseid");
					this.OncourseidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Time NOT NULL")]
		public System.TimeSpan time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="TinyInt NOT NULL")]
		public byte active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schedule_teacherSchedule", Storage="_teacherSchedules", ThisKey="id", OtherKey="schedualSchedualId")]
		public EntitySet<teacherSchedule> teacherSchedules
		{
			get
			{
				return this._teacherSchedules;
			}
			set
			{
				this._teacherSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schedule_studentSchedule", Storage="_studentSchedules", ThisKey="id", OtherKey="scheduleScheduleId")]
		public EntitySet<studentSchedule> studentSchedules
		{
			get
			{
				return this._studentSchedules;
			}
			set
			{
				this._studentSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_schedule", Storage="_course", ThisKey="courseid", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.schedules.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.schedules.Add(this);
						this._courseid = value.id;
					}
					else
					{
						this._courseid = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_schedule", Storage="_room", ThisKey="roomId", OtherKey="id", IsForeignKey=true)]
		public room room
		{
			get
			{
				return this._room.Entity;
			}
			set
			{
				room previousValue = this._room.Entity;
				if (((previousValue != value) 
							|| (this._room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._room.Entity = null;
						previousValue.schedules.Remove(this);
					}
					this._room.Entity = value;
					if ((value != null))
					{
						value.schedules.Add(this);
						this._roomId = value.id;
					}
					else
					{
						this._roomId = default(int);
					}
					this.SendPropertyChanged("room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_teacherSchedules(teacherSchedule entity)
		{
			this.SendPropertyChanging();
			entity.schedule = this;
		}
		
		private void detach_teacherSchedules(teacherSchedule entity)
		{
			this.SendPropertyChanging();
			entity.schedule = null;
		}
		
		private void attach_studentSchedules(studentSchedule entity)
		{
			this.SendPropertyChanging();
			entity.schedule = this;
		}
		
		private void detach_studentSchedules(studentSchedule entity)
		{
			this.SendPropertyChanging();
			entity.schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.semester")]
	public partial class semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _semesterName;
		
		private string _Describtion;
		
		private EntitySet<profile> _profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsemesterNameChanging(string value);
    partial void OnsemesterNameChanged();
    partial void OnDescribtionChanging(string value);
    partial void OnDescribtionChanged();
    #endregion
		
		public semester()
		{
			this._profiles = new EntitySet<profile>(new Action<profile>(this.attach_profiles), new Action<profile>(this.detach_profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string semesterName
		{
			get
			{
				return this._semesterName;
			}
			set
			{
				if ((this._semesterName != value))
				{
					this.OnsemesterNameChanging(value);
					this.SendPropertyChanging();
					this._semesterName = value;
					this.SendPropertyChanged("semesterName");
					this.OnsemesterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describtion", DbType="NVarChar(255)")]
		public string Describtion
		{
			get
			{
				return this._Describtion;
			}
			set
			{
				if ((this._Describtion != value))
				{
					this.OnDescribtionChanging(value);
					this.SendPropertyChanging();
					this._Describtion = value;
					this.SendPropertyChanged("Describtion");
					this.OnDescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="semester_profile", Storage="_profiles", ThisKey="id", OtherKey="semesterid")]
		public EntitySet<profile> profiles
		{
			get
			{
				return this._profiles;
			}
			set
			{
				this._profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.semester = this;
		}
		
		private void detach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sessions")]
	public partial class session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _oid;
		
		private string _id;
		
		private string _uid;
		
		private string _pwd;
		
		private string _dn;
		
		private System.Data.Linq.Binary _time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoidChanging(int value);
    partial void OnoidChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnuidChanging(string value);
    partial void OnuidChanged();
    partial void OnpwdChanging(string value);
    partial void OnpwdChanged();
    partial void OndnChanging(string value);
    partial void OndnChanged();
    partial void OntimeChanging(System.Data.Linq.Binary value);
    partial void OntimeChanged();
    #endregion
		
		public session()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int oid
		{
			get
			{
				return this._oid;
			}
			set
			{
				if ((this._oid != value))
				{
					this.OnoidChanging(value);
					this.SendPropertyChanging();
					this._oid = value;
					this.SendPropertyChanged("oid");
					this.OnoidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pwd", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string pwd
		{
			get
			{
				return this._pwd;
			}
			set
			{
				if ((this._pwd != value))
				{
					this.OnpwdChanging(value);
					this.SendPropertyChanging();
					this._pwd = value;
					this.SendPropertyChanged("pwd");
					this.OnpwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dn", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string dn
		{
			get
			{
				return this._dn;
			}
			set
			{
				if ((this._dn != value))
				{
					this.OndnChanging(value);
					this.SendPropertyChanging();
					this._dn = value;
					this.SendPropertyChanged("dn");
					this.OndnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.studentCourse")]
	public partial class studentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _courseId;
		
		private int _profileId;
		
		private int _Grade;
		
		private EntityRef<course> _course;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncourseIdChanging(int value);
    partial void OncourseIdChanged();
    partial void OnprofileIdChanging(int value);
    partial void OnprofileIdChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    #endregion
		
		public studentCourse()
		{
			this._course = default(EntityRef<course>);
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseId", DbType="Int NOT NULL")]
		public int courseId
		{
			get
			{
				return this._courseId;
			}
			set
			{
				if ((this._courseId != value))
				{
					this.OncourseIdChanging(value);
					this.SendPropertyChanging();
					this._courseId = value;
					this.SendPropertyChanged("courseId");
					this.OncourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profileId", DbType="Int NOT NULL")]
		public int profileId
		{
			get
			{
				return this._profileId;
			}
			set
			{
				if ((this._profileId != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprofileIdChanging(value);
					this.SendPropertyChanging();
					this._profileId = value;
					this.SendPropertyChanged("profileId");
					this.OnprofileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_studentCourse", Storage="_course", ThisKey="Id", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.studentCourse = null;
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.studentCourse = this;
						this._Id = value.id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_studentCourse", Storage="_profile", ThisKey="profileId", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.studentCourses.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.studentCourses.Add(this);
						this._profileId = value.id;
					}
					else
					{
						this._profileId = default(int);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.studentSchedule")]
	public partial class studentSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _scheduleProfileId;
		
		private int _scheduleScheduleId;
		
		private string _paid;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<schedule> _schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnscheduleProfileIdChanging(int value);
    partial void OnscheduleProfileIdChanged();
    partial void OnscheduleScheduleIdChanging(int value);
    partial void OnscheduleScheduleIdChanged();
    partial void OnpaidChanging(string value);
    partial void OnpaidChanged();
    #endregion
		
		public studentSchedule()
		{
			this._profile = default(EntityRef<profile>);
			this._schedule = default(EntityRef<schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleProfileId", DbType="Int NOT NULL")]
		public int scheduleProfileId
		{
			get
			{
				return this._scheduleProfileId;
			}
			set
			{
				if ((this._scheduleProfileId != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleProfileIdChanging(value);
					this.SendPropertyChanging();
					this._scheduleProfileId = value;
					this.SendPropertyChanged("scheduleProfileId");
					this.OnscheduleProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scheduleScheduleId", DbType="Int NOT NULL")]
		public int scheduleScheduleId
		{
			get
			{
				return this._scheduleScheduleId;
			}
			set
			{
				if ((this._scheduleScheduleId != value))
				{
					if (this._schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscheduleScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._scheduleScheduleId = value;
					this.SendPropertyChanged("scheduleScheduleId");
					this.OnscheduleScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paid", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string paid
		{
			get
			{
				return this._paid;
			}
			set
			{
				if ((this._paid != value))
				{
					this.OnpaidChanging(value);
					this.SendPropertyChanging();
					this._paid = value;
					this.SendPropertyChanged("paid");
					this.OnpaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_studentSchedule", Storage="_profile", ThisKey="scheduleProfileId", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.studentSchedules.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.studentSchedules.Add(this);
						this._scheduleProfileId = value.id;
					}
					else
					{
						this._scheduleProfileId = default(int);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schedule_studentSchedule", Storage="_schedule", ThisKey="scheduleScheduleId", OtherKey="id", IsForeignKey=true)]
		public schedule schedule
		{
			get
			{
				return this._schedule.Entity;
			}
			set
			{
				schedule previousValue = this._schedule.Entity;
				if (((previousValue != value) 
							|| (this._schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._schedule.Entity = null;
						previousValue.studentSchedules.Remove(this);
					}
					this._schedule.Entity = value;
					if ((value != null))
					{
						value.studentSchedules.Add(this);
						this._scheduleScheduleId = value.id;
					}
					else
					{
						this._scheduleScheduleId = default(int);
					}
					this.SendPropertyChanged("schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacher")]
	public partial class teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _lastName;
		
		private string _address;
		
		private string _phone;
		
		private string _mobile;
		
		private string _email;
		
		private int _courseId;
		
		private EntitySet<teacherCourse> _teacherCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OncourseIdChanging(int value);
    partial void OncourseIdChanged();
    #endregion
		
		public teacher()
		{
			this._teacherCourses = new EntitySet<teacherCourse>(new Action<teacherCourse>(this.attach_teacherCourses), new Action<teacherCourse>(this.detach_teacherCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(10)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NChar(10)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseId", DbType="Int NOT NULL")]
		public int courseId
		{
			get
			{
				return this._courseId;
			}
			set
			{
				if ((this._courseId != value))
				{
					this.OncourseIdChanging(value);
					this.SendPropertyChanging();
					this._courseId = value;
					this.SendPropertyChanged("courseId");
					this.OncourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_teacherCourse", Storage="_teacherCourses", ThisKey="id", OtherKey="teacherId")]
		public EntitySet<teacherCourse> teacherCourses
		{
			get
			{
				return this._teacherCourses;
			}
			set
			{
				this._teacherCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_teacherCourses(teacherCourse entity)
		{
			this.SendPropertyChanging();
			entity.teacher = this;
		}
		
		private void detach_teacherCourses(teacherCourse entity)
		{
			this.SendPropertyChanging();
			entity.teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacherCourse")]
	public partial class teacherCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _teacherId;
		
		private int _courseId;
		
		private EntityRef<course> _course;
		
		private EntityRef<teacher> _teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnteacherIdChanging(int value);
    partial void OnteacherIdChanged();
    partial void OncourseIdChanging(int value);
    partial void OncourseIdChanged();
    #endregion
		
		public teacherCourse()
		{
			this._course = default(EntityRef<course>);
			this._teacher = default(EntityRef<teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherId", DbType="Int NOT NULL")]
		public int teacherId
		{
			get
			{
				return this._teacherId;
			}
			set
			{
				if ((this._teacherId != value))
				{
					if (this._teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIdChanging(value);
					this.SendPropertyChanging();
					this._teacherId = value;
					this.SendPropertyChanged("teacherId");
					this.OnteacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseId", DbType="Int NOT NULL")]
		public int courseId
		{
			get
			{
				return this._courseId;
			}
			set
			{
				if ((this._courseId != value))
				{
					this.OncourseIdChanging(value);
					this.SendPropertyChanging();
					this._courseId = value;
					this.SendPropertyChanged("courseId");
					this.OncourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_teacherCourse", Storage="_course", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.teacherCourse = null;
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.teacherCourse = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_teacherCourse", Storage="_teacher", ThisKey="teacherId", OtherKey="id", IsForeignKey=true)]
		public teacher teacher
		{
			get
			{
				return this._teacher.Entity;
			}
			set
			{
				teacher previousValue = this._teacher.Entity;
				if (((previousValue != value) 
							|| (this._teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._teacher.Entity = null;
						previousValue.teacherCourses.Remove(this);
					}
					this._teacher.Entity = value;
					if ((value != null))
					{
						value.teacherCourses.Add(this);
						this._teacherId = value.id;
					}
					else
					{
						this._teacherId = default(int);
					}
					this.SendPropertyChanged("teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
